# ----------------------------------------------------------------------
# | Config file for example.com host and Magento 2                     |
# ----------------------------------------------------------------------
#
# This file is a template for an Nginx server.
# This Nginx server listens for the `example.com` host and handles requests.
# Replace `example.com` with your hostname before enabling.

# Maps config file
include magenx/conf_m2/maps.conf;

# certbot-auto renew webroot from magenx
# server {
# listen 80;
# server_name example.com;
#
# location ~ /\.well-known/acme-challenge {
#   root $MAGE_ROOT/pub;
# }
#
# location / { return 301 https://example.com$request_uri;  }
# }

# Proxy server to terminate ssl before varnish
server {
  # listen [::]:443 ssl http2 accept_filter=dataready;  # for FreeBSD
  # listen 443 ssl http2 accept_filter=dataready;  # for FreeBSD
  listen [::]:443 ssl http2;
  listen 443 ssl http2;

  # The host name to respond to
  server_name example.com;

  # Set Magento root folder for working maintenance (see magenx/conf_m2/maintenance.conf)
  set $MAGE_ROOT /var/www/html;

  include h5bp/ssl/ssl_engine.conf;
  include conf.d/sites/example.com/certificate_files.conf;
  include h5bp/ssl/policy_intermediate.conf;

  # Path for static files
  root /var/www/example.com/public;

  if ($api_access) { return 200 'api access disabled in nginx'; }
  if ($bad_client) { return 403; }

  # Server maintenance block.
  include magenx/conf_m2/maintenance.conf;

  # Custom error pages
  include h5bp/errors/custom_errors.conf;

  # Include the basic h5bp config set
  include h5bp/basic.conf;

  # Proxy-pass to Varnish
  location / {
    include /etc/nginx/magenx/conf_m2/varnish_proxy.conf;
  }
}

server {
  listen 127.0.0.1:8080;
  server_name example.com;

  # Set Magento root folder
  set $MAGE_ROOT /var/www/html;
  # Set main public directory /pub
  root $MAGE_ROOT/pub;

  # Sitemap and feeds
  include conf.d/sites/example.com/sitemaps.conf;

  # phpMyAdmin configuration
  include magenx/conf_m2/phpmyadmin.conf;

  # Nginx and php-fpm status
  include magenx/conf_m2/status.conf;

  # Magento Setup Tool
  include magenx/conf_m2/setup.conf;

  # Deny all internal locations
  location ~ ^/(app|generated|lib|bin|var|tmp|phpserver|vendor)/ {
    deny all;
  }

  location / {
    try_files $uri $uri/ /index.php$is_args$args;
  }

  # Error log/page
  # include magenx/conf_m2/error_page.conf;

  # Static location
  include magenx/conf_m2/assets.conf;

  # Protect extra directories
  include magenx/conf_m2/extra_protect.conf;

  # Process php files (strict rule, define files to be executed)
  location ~ ^/(index|health_check|get|static|errors/(report|404|503))\.php$ {
    try_files $uri =404;
    # fastcgi_intercept_errors on;
    include magenx/conf_m2/php_backend.conf;

    # Enable Magento profiler
    # fastcgi_param MAGE_PROFILER $MAGE_PROFILER;

    # Store code with multi domain
    # fastcgi_param MAGE_RUN_CODE $MAGE_RUN_CODE;
    # fastcgi_param MAGE_RUN_TYPE $MAGE_RUN_TYPE;

    # Enable POST logging in admin
    # if ($request_method = POST) {set $adminpost A;}
    # if ($request_uri ~* "/ADMIN_PLACEHOLDER/") {set $adminpost "${adminpost}B";}
    # if ($adminpost = AB) { access_log /var/log/nginx/admin_post.log adminpost;}

  }

  # Block other undefined php files, possible injections and random malware hooks.
  location ~* \.php$ {
    return 404;
  }
}

# Choose between www and non-www, listen on the wrong one and redirect to
# the right one.
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#server-name-if
server {
  listen [::]:443 ssl http2;
  listen 443 ssl http2;

  server_name www.example.com;

  include h5bp/ssl/ssl_engine.conf;
  include conf.d/sites/example.com/certificate_files.conf;
  include h5bp/ssl/policy_intermediate.conf;

  return 301 $scheme://example.com$request_uri;
}

# Choose between www and non-www, listen on the wrong one and redirect to
# the right one.
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#server-name-if
server {
  listen [::]:80;
  listen 80;

  # listen on both hosts
  server_name example.com www.example.com;

  # and redirect to the https host (declared below)
  # avoiding http://www -> https://www -> https:// chain.
  return 301 https://example.com$request_uri;
}

